diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
index bf022c6..b372393 100644
--- a/include/uapi/linux/fou.h
+++ b/include/uapi/linux/fou.h
@@ -14,8 +14,6 @@ enum {
 	FOU_ATTR_PORT,				/* u16 */
 	FOU_ATTR_AF,				/* u8 */
 	FOU_ATTR_IPPROTO,			/* u8 */
-	FOU_ATTR_TYPE,				/* u8 */
-	FOU_ATTR_REMCSUM_NOPARTIAL,		/* flag */
 
 	__FOU_ATTR_MAX,
 };
@@ -31,12 +29,6 @@ enum {
 	__FOU_CMD_MAX,
 };
 
-enum {
-	FOU_ENCAP_UNSPEC,
-	FOU_ENCAP_DIRECT,
-	FOU_ENCAP_GUE,
-};
-
 #define FOU_CMD_MAX	(__FOU_CMD_MAX - 1)
 
 #endif /* _LINUX_FOU_H */
diff --git a/ip/ipfou.c b/ip/ipfou.c
index 1f392ad..3824b19 100644
--- a/ip/ipfou.c
+++ b/ip/ipfou.c
@@ -25,8 +25,7 @@
 
 static void usage(void)
 {
-	fprintf(stderr, "Usage: ip fou add port PORT "
-		"{ ipproto PROTO  | gue } [ -6 ]\n");
+	fprintf(stderr, "Usage: ip fou add port PORT ipproto PROTO\n");
 	fprintf(stderr, "       ip fou del port PORT [ -6 ]\n");
 	fprintf(stderr, "       ip fou show\n");
 	fprintf(stderr, "\n");
@@ -49,8 +48,7 @@ static int fou_parse_opt(int argc, char **argv, struct nlmsghdr *n,
 {
 	__u16 port;
 	int port_set = 0;
-	__u8 ipproto, type;
-	bool gue_set = false;
+	__u8 ipproto;
 	int ipproto_set = 0;
 	__u8 family = AF_INET;
 
@@ -72,8 +70,6 @@ static int fou_parse_opt(int argc, char **argv, struct nlmsghdr *n,
 			else if (get_u8(&ipproto, *argv, 0) || ipproto == 0)
 				invarg("invalid ipproto", *argv);
 			ipproto_set = 1;
-		} else if (!matches(*argv, "gue")) {
-			gue_set = true;
 		} else if (!matches(*argv, "-6")) {
 			family = AF_INET6;
 		} else {
@@ -89,24 +85,14 @@ static int fou_parse_opt(int argc, char **argv, struct nlmsghdr *n,
 		return -1;
 	}
 
-	if (!ipproto_set && !gue_set && adding) {
-		fprintf(stderr, "fou: must set ipproto or gue\n");
+	if (!ipproto_set && adding) {	
+		fprintf(stderr, "fou: must set ipproto \n");
 		return -1;
 	}
 
-	if (ipproto_set && gue_set) {
-		fprintf(stderr, "fou: cannot set ipproto and gue\n");
-		return -1;
-	}
-
-	type = gue_set ? FOU_ENCAP_GUE : FOU_ENCAP_DIRECT;
 
 	addattr16(n, 1024, FOU_ATTR_PORT, port);
-	addattr8(n, 1024, FOU_ATTR_TYPE, type);
-	addattr8(n, 1024, FOU_ATTR_AF, family);
-
-	if (ipproto_set)
-		addattr8(n, 1024, FOU_ATTR_IPPROTO, ipproto);
+	addattr8(n, 1024, FOU_ATTR_IPPROTO, ipproto);
 
 	return 0;
 }
diff --git a/ip/link_l2fou.c b/ip/link_l2fou.c
new file mode 100644
index 0000000..f6e9353
--- /dev/null
+++ b/ip/link_l2fou.c
@@ -0,0 +1,215 @@
+/*
+ * link_l2fou.c	l2fou
+ *
+ *		This program is free software; you can redistribute it and/or
+ *		modify it under the terms of the GNU General Public License
+ *		as published by the Free Software Foundation; either version
+ *		2 of the License, or (at your option) any later version.
+ *
+ * Authors:	Nicolas Dichtel <nicolas.dichtel@6wind.com>
+ *
+ */
+
+#include <string.h>
+#include <net/if.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <arpa/inet.h>
+
+#include <linux/ip.h>
+#include <linux/if_tunnel.h>
+#include "rt_names.h"
+#include "utils.h"
+#include "ip_common.h"
+#include "tunnel.h"
+
+static void print_usage(FILE *f)
+{
+	fprintf(f, "Usage: ip link { add | set | change | replace | del } NAME\n");
+	fprintf(f, "          type l2fou [ remote ADDR ] [ local ADDR ]\n");
+	fprintf(f, "          [ ttl TTL ]\n");
+	fprintf(f, "          [ sport PORT ] [ dport PORT ]\n");
+	fprintf(f, "\n");
+	fprintf(f, "Where: NAME := STRING\n");
+	fprintf(f, "       ADDR := { IP_ADDRESS | any }\n");
+	fprintf(f, "       TTL  := { 1..255 | inherit }\n");
+}
+
+static void usage(void) __attribute__((noreturn));
+static void usage(void)
+{
+	print_usage(stderr);
+	exit(-1);
+}
+
+static int l2fou_parse_opt(struct link_util *lu, int argc, char **argv,
+			      struct nlmsghdr *n)
+{
+	struct {
+		struct nlmsghdr n;
+		struct ifinfomsg i;
+		char buf[2048];
+	} req;
+	struct ifinfomsg *ifi = (struct ifinfomsg *)(n + 1);
+	struct rtattr *tb[IFLA_MAX + 1];
+	struct rtattr *linkinfo[IFLA_INFO_MAX+1];
+	struct rtattr *iptuninfo[IFLA_IPTUN_MAX + 1];
+	int len;
+	__u32 laddr = 0;
+	__u32 raddr = 0;
+	__u8 ttl = 0;
+	__u16 sport = 0;
+	__u16 dport = 0;
+
+	if (!(n->nlmsg_flags & NLM_F_CREATE)) {
+		memset(&req, 0, sizeof(req));
+
+		req.n.nlmsg_len = NLMSG_LENGTH(sizeof(*ifi));
+		req.n.nlmsg_flags = NLM_F_REQUEST;
+		req.n.nlmsg_type = RTM_GETLINK;
+		req.i.ifi_family = preferred_family;
+		req.i.ifi_index = ifi->ifi_index;
+
+		if (rtnl_talk(&rth, &req.n, 0, 0, &req.n) < 0) {
+get_failed:
+			fprintf(stderr,
+				"Failed to get existing tunnel info.\n");
+			return -1;
+		}
+
+		len = req.n.nlmsg_len;
+		len -= NLMSG_LENGTH(sizeof(*ifi));
+		if (len < 0)
+			goto get_failed;
+
+		parse_rtattr(tb, IFLA_MAX, IFLA_RTA(&req.i), len);
+
+		if (!tb[IFLA_LINKINFO])
+			goto get_failed;
+
+		parse_rtattr_nested(linkinfo, IFLA_INFO_MAX, tb[IFLA_LINKINFO]);
+
+		if (!linkinfo[IFLA_INFO_DATA])
+			goto get_failed;
+
+		parse_rtattr_nested(iptuninfo, IFLA_IPTUN_MAX,
+				    linkinfo[IFLA_INFO_DATA]);
+
+		if (iptuninfo[IFLA_IPTUN_LOCAL])
+			laddr = rta_getattr_u32(iptuninfo[IFLA_IPTUN_LOCAL]);
+
+		if (iptuninfo[IFLA_IPTUN_REMOTE])
+			raddr = rta_getattr_u32(iptuninfo[IFLA_IPTUN_REMOTE]);
+
+		if (iptuninfo[IFLA_IPTUN_TTL])
+			ttl = rta_getattr_u8(iptuninfo[IFLA_IPTUN_TTL]);
+
+		if (iptuninfo[IFLA_IPTUN_ENCAP_SPORT])
+			sport = rta_getattr_u16(iptuninfo[IFLA_IPTUN_ENCAP_SPORT]);
+		if (iptuninfo[IFLA_IPTUN_ENCAP_DPORT])
+			dport = rta_getattr_u16(iptuninfo[IFLA_IPTUN_ENCAP_DPORT]);
+	}
+
+	while (argc > 0) {
+		if (strcmp(*argv, "remote") == 0) {
+			NEXT_ARG();
+			if (strcmp(*argv, "any"))
+				raddr = get_addr32(*argv);
+			else
+				raddr = 0;
+		} else if (strcmp(*argv, "local") == 0) {
+			NEXT_ARG();
+			if (strcmp(*argv, "any"))
+				laddr = get_addr32(*argv);
+			else
+				laddr = 0;
+		} else if (strcmp(*argv, "ttl") == 0 ||
+			   strcmp(*argv, "hoplimit") == 0) {
+			NEXT_ARG();
+			if (strcmp(*argv, "inherit") != 0) {
+				if (get_u8(&ttl, *argv, 0))
+					invarg("invalid TTL\n", *argv);
+			} else
+				ttl = 0;
+		} else if (strcmp(*argv, "sport") == 0) {
+			NEXT_ARG();
+			if (strcmp(*argv, "auto") == 0)
+				sport = 0;
+			else if (get_u16(&sport, *argv, 0))
+				invarg("Invalid source port.", *argv);
+		} else if (strcmp(*argv, "dport") == 0) {
+			NEXT_ARG();
+			if (get_u16(&dport, *argv, 0))
+				invarg("Invalid destination port.", *argv);
+		} else
+			usage();
+		argc--, argv++;
+	}
+
+	addattr32(n, 1024, IFLA_IPTUN_LOCAL, laddr);
+	addattr32(n, 1024, IFLA_IPTUN_REMOTE, raddr);
+	addattr8(n, 1024, IFLA_IPTUN_TTL, ttl);
+
+	addattr16(n, 1024, IFLA_IPTUN_ENCAP_SPORT, htons(sport));
+	addattr16(n, 1024, IFLA_IPTUN_ENCAP_DPORT, htons(dport));
+
+	return 0;
+}
+
+static void l2fou_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
+{
+	char s1[1024];
+	char s2[64];
+	const char *local = "any";
+	const char *remote = "any";
+
+	if (!tb)
+		return;
+
+	if (tb[IFLA_IPTUN_REMOTE]) {
+		unsigned addr = rta_getattr_u32(tb[IFLA_IPTUN_REMOTE]);
+
+		if (addr)
+			remote = format_host(AF_INET, 4, &addr, s1, sizeof(s1));
+	}
+
+	fprintf(f, "remote %s ", remote);
+
+	if (tb[IFLA_IPTUN_LOCAL]) {
+		unsigned addr = rta_getattr_u32(tb[IFLA_IPTUN_LOCAL]);
+
+		if (addr)
+			local = format_host(AF_INET, 4, &addr, s1, sizeof(s1));
+	}
+
+	fprintf(f, "local %s ", local);
+
+	if (tb[IFLA_IPTUN_TTL] && rta_getattr_u8(tb[IFLA_IPTUN_TTL]))
+		fprintf(f, "ttl %d ", rta_getattr_u8(tb[IFLA_IPTUN_TTL]));
+	else
+		fprintf(f, "ttl inherit ");
+
+	__u16 sport = rta_getattr_u16(tb[IFLA_IPTUN_ENCAP_SPORT]);
+	__u16 dport = rta_getattr_u16(tb[IFLA_IPTUN_ENCAP_DPORT]);
+
+	if (sport == 0)
+		fputs("sport auto ", f);
+	else
+		fprintf(f, "sport %u", ntohs(sport));
+
+	fprintf(f, "dport %u ", ntohs(dport));
+}
+
+static void l2fou_print_help(struct link_util *lu, int argc, char **argv,
+	FILE *f)
+{
+	print_usage(f);
+}
+
+struct link_util l2fou_link_util = {
+	.id = "l2fou",
+	.maxattr = IFLA_IPTUN_MAX,
+	.parse_opt = l2fou_parse_opt,
+	.print_opt = l2fou_print_opt,
+	.print_help = l2fou_print_help,
+};
diff --git a/ip/ipfou.c b/ip/ipfou.c
index 3824b19..835c2cb 100644
--- a/ip/ipfou.c
+++ b/ip/ipfou.c
@@ -142,8 +142,6 @@ static int print_fou_mapping(const struct sockaddr_nl *who,
 
 	if (tb[FOU_ATTR_PORT])
 		fprintf(fp, "port %u", ntohs(rta_getattr_u16(tb[FOU_ATTR_PORT])));
-	if (tb[FOU_ATTR_TYPE] && rta_getattr_u8(tb[FOU_ATTR_TYPE]) == FOU_ENCAP_GUE)
-		fprintf(fp, " gue");
 	else if (tb[FOU_ATTR_IPPROTO])
 		fprintf(fp, " ipproto %u", rta_getattr_u8(tb[FOU_ATTR_IPPROTO]));
 	if (tb[FOU_ATTR_AF]) {
diff --git a/ip/Makefile b/ip/Makefile
index c1dee0b..b86665f 100644
--- a/ip/Makefile
+++ b/ip/Makefile
@@ -10,7 +10,7 @@ IPOBJ=ip.o ipaddress.o ipaddrlabel.o iproute.o iprule.o ipnetns.o \
     link_iptnl.o link_gre6.o iplink_bond.o iplink_bond_slave.o iplink_hsr.o \
     iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o \
     iplink_geneve.o iplink_vrf.o iproute_lwtunnel.o ipmacsec.o ipila.o \
-    ipvrf.o iplink_xstats.o ipseg6.o
+    ipvrf.o iplink_xstats.o ipseg6.o link_l2fou.o
 
 RTMONOBJ=rtmon.o
 
diff --git a/ip/link_l2fou.c b/ip/link_l2fou.c
index f6e9353..6360581 100644
--- a/ip/link_l2fou.c
+++ b/ip/link_l2fou.c
@@ -50,6 +50,7 @@ static int l2fou_parse_opt(struct link_util *lu, int argc, char **argv,
 		struct ifinfomsg i;
 		char buf[2048];
 	} req;
+	struct nlmsghdr *answer;
 	struct ifinfomsg *ifi = (struct ifinfomsg *)(n + 1);
 	struct rtattr *tb[IFLA_MAX + 1];
 	struct rtattr *linkinfo[IFLA_INFO_MAX+1];
@@ -70,19 +71,20 @@ static int l2fou_parse_opt(struct link_util *lu, int argc, char **argv,
 		req.i.ifi_family = preferred_family;
 		req.i.ifi_index = ifi->ifi_index;
 
-		if (rtnl_talk(&rth, &req.n, 0, 0, &req.n) < 0) {
+		if (rtnl_talk(&rth, &req.n, &answer) < 0) {
 get_failed:
 			fprintf(stderr,
 				"Failed to get existing tunnel info.\n");
 			return -1;
 		}
 
-		len = req.n.nlmsg_len;
+		len = answer->nlmsg_len;
 		len -= NLMSG_LENGTH(sizeof(*ifi));
 		if (len < 0)
 			goto get_failed;
 
-		parse_rtattr(tb, IFLA_MAX, IFLA_RTA(&req.i), len);
+
+		parse_rtattr(tb, IFLA_MAX, IFLA_RTA(NLMSG_DATA(answer)), len);
 
 		if (!tb[IFLA_LINKINFO])
 			goto get_failed;
@@ -108,6 +110,8 @@ get_failed:
 			sport = rta_getattr_u16(iptuninfo[IFLA_IPTUN_ENCAP_SPORT]);
 		if (iptuninfo[IFLA_IPTUN_ENCAP_DPORT])
 			dport = rta_getattr_u16(iptuninfo[IFLA_IPTUN_ENCAP_DPORT]);
+
+		free(answer);
 	}
 
 	while (argc > 0) {
@@ -170,7 +174,7 @@ static void l2fou_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
 		unsigned addr = rta_getattr_u32(tb[IFLA_IPTUN_REMOTE]);
 
 		if (addr)
-			remote = format_host(AF_INET, 4, &addr, s1, sizeof(s1));
+			remote = format_host(AF_INET, 4, &addr);
 	}
 
 	fprintf(f, "remote %s ", remote);
@@ -179,7 +183,7 @@ static void l2fou_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
 		unsigned addr = rta_getattr_u32(tb[IFLA_IPTUN_LOCAL]);
 
 		if (addr)
-			local = format_host(AF_INET, 4, &addr, s1, sizeof(s1));
+			local = format_host(AF_INET, 4, &addr);
 	}
 
 	fprintf(f, "local %s ", local);
